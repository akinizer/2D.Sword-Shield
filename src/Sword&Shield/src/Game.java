//import java.applet.*;
import java.awt.*;
import java.awt.event.*;
import java.io.IOException;

import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.Clip;

import javax.swing.*;
import javax.swing.text.html.ListView;

import java.applet.AudioClip;
import java.net.URL;
import java.util.ArrayList;
//import java.sql.Driver;
import java.util.Observable;


//Game GUI class
public class Game{
	
	//variables
	private AudioClip current;
	private JButton newGame, help, credits, sound;
	
	//method to focus relative frame to center of window
	private void centreWindow(Window frame) {
	    Dimension dimension = Toolkit.getDefaultToolkit().getScreenSize();
	    int x = (int) ((dimension.getWidth() - frame.getWidth()) / 3);
	    int y = (int) ((dimension.getHeight() - frame.getHeight()) / 3);
	    frame.setLocation(x, y);
	}
	
	//method to play a song from a specified url
	//source "https://stackoverflow.com/questions/26305/how-can-i-play-sound-in-java"
	private static synchronized void playSound(final String url) {
		  new Thread(new Runnable() {
		    public void run() {
		      try {
		        Clip clip = AudioSystem.getClip();
		        AudioInputStream inputStream = AudioSystem.getAudioInputStream(
		        Main.class.getResourceAsStream("/path/to/sounds/" + url)); //default
		        clip.open(inputStream);
		        clip.start(); 
		      } catch (Exception e) {
		        System.err.println(e.getMessage());
		      }
		    }
		  }).start();
		}
	
	//main method to set up GUI content
	public Game() throws IOException {
		// TODO Auto-generated method stub
		System.out.println("main menu frame is activated");
		
		//main menu frame
		JFrame frame = new JFrame("S&S: A Space Adventure");
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		centreWindow(frame);
		
		//master panel with its attributes
		JPanel masterPanel = new JPanel();
		masterPanel.setPreferredSize(new Dimension(500,300));
		masterPanel.setBackground(new Color(253, 253, 150));		
				
		//panel to keep sub panels in order
		JPanel panel = new JPanel();
		panel.setPreferredSize(new Dimension(500,500));
		panel.setBackground(new Color(253, 253, 150));

		//button creation
		current = JApplet.newAudioClip( new URL("file:///C:/Users/user/eclipse-workspace/Sword&Shield/RA.wav" ) );			
		
		newGame = new JButton("New Game");
		help = new JButton("?");			//not inserted to program yet
		credits = new JButton("Credits");
		sound = new JButton("Sound");
		
		//button action contents
		
		//new game button action
		newGame.addActionListener(new ActionListener()		{			
			
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub		
				
					System.out.println("newGame frame is activated");
										
					//new game frame
				    JFrame bGUI = new JFrame("S&S: A Space Adventure");
					
					//display exited log on close
				    bGUI.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);	//don't close immediately
					
					//location
					bGUI.setLocation(100,100);

					//game panel - orange colored region atm, color may be changed to a background picture or to grass
					JPanel gamePanel = new JPanel();
					gamePanel.setPreferredSize(new Dimension(1575,890));
					gamePanel.setBackground(new Color(255,179,71));
										
					//display panel
					final JPanel displayPanel = new JPanel();
					displayPanel.setPreferredSize(new Dimension(1560,125));
					displayPanel.setOpaque(false);
										
					//display visuals
					double curVal1 = 1000; // you can make currency value as bitcoin, gold, coin, dollar etc -> also you can get values from gold drops & generated by reactor 
					double curVal2 = 850;
					
					String curSym = "BTC"; // $, £, TL, etc currency symbol
					
					int score1 = 3, score2 = 2; //player 1 and player 2 scores
					
					int minutes = 2, seconds = 59; //minutes and seconds for timer, content will be taken from the system
					
					//player 1 balance
					JPanel p1bal = new JPanel();	
					p1bal.setPreferredSize(new Dimension(100,50));
					p1bal.setBackground(Color.yellow);
					
					//player 1 balance text
					JLabel p1bal_text = new JLabel(curVal1 + " " +  curSym);					
					p1bal_text.setPreferredSize(new Dimension(100,40));
					p1bal_text.setHorizontalAlignment(SwingConstants.CENTER);
					p1bal_text.setVerticalAlignment(SwingConstants.CENTER);
					p1bal.add(p1bal_text);
					
					//player 1 score
					JPanel p1score = new JPanel();
					p1score.setPreferredSize(new Dimension(100,50));
					p1score.setBackground(Color.yellow);
					
					//player 1 score text
					JLabel p1score_text = new JLabel(score1 + "");			
					p1score_text.setPreferredSize(new Dimension(100,40));
					p1score_text.setHorizontalAlignment(SwingConstants.CENTER);
					p1score_text.setVerticalAlignment(SwingConstants.CENTER);
					p1score.add(p1score_text);
					
					//timer
					JPanel timer = new JPanel();							
					timer.setPreferredSize(new Dimension(100,50));
					timer.setBackground(Color.yellow);
					
					//timer text
					JLabel timer_text = new JLabel(minutes + " : " + seconds );	
					timer_text.setPreferredSize(new Dimension(100,40));
					timer_text.setHorizontalAlignment(SwingConstants.CENTER);
					timer_text.setVerticalAlignment(SwingConstants.CENTER);
					timer.add(timer_text);
					
					//player 2 score
					JPanel p2score = new JPanel();
					p2score.setPreferredSize(new Dimension(100,50));
					p2score.setBackground(Color.yellow);
					
					//player 2 score text
					JLabel p2score_text = new JLabel(score2 + "");			
					p2score_text.setPreferredSize(new Dimension(100,40));
					p2score_text.setHorizontalAlignment(SwingConstants.CENTER);
					p2score_text.setVerticalAlignment(SwingConstants.CENTER);
					p2score.add(p2score_text);
					
					//player 1 balance
					JPanel p2bal = new JPanel();	
					p2bal.setPreferredSize(new Dimension(100,50));
					p2bal.setBackground(Color.yellow);
					
					//player 1 balance text
					JLabel p2bal_text = new JLabel(curVal2 + " " +  curSym);					
					p2bal_text.setPreferredSize(new Dimension(100,40));
					p2bal_text.setHorizontalAlignment(SwingConstants.CENTER);
					p1bal_text.setVerticalAlignment(SwingConstants.CENTER);
					p2bal.add(p2bal_text);
					
					//add visuals to display panel
					displayPanel.add(p1bal);
					displayPanel.add(p1score);
					displayPanel.add(timer);
					displayPanel.add(p2score);
					displayPanel.add(p2bal);
					
					//player 1 menu list  version1
					JPanel p1menu = new JPanel(); 
					p1menu.setPreferredSize(new Dimension(175,750));
					p1menu.setBackground(new Color(245,222,179));
										
					//shop items for p1
					JPanel item1 = new JPanel();
					item1.setPreferredSize(new Dimension(100,100));
					item1.setBackground(Color.red);							
					
					JPanel item2 = new JPanel();
					item2.setPreferredSize(new Dimension(100,100));
					item2.setBackground(Color.green);
					
					JPanel item3 = new JPanel();
					item3.setPreferredSize(new Dimension(100,100));
					item3.setBackground(Color.blue);
					
					JPanel item4 = new JPanel();
					item4.setPreferredSize(new Dimension(100,100));
					item4.setBackground(Color.black);
					
					JPanel item5 = new JPanel();
					item5.setPreferredSize(new Dimension(100,100));
					item5.setBackground(Color.white);
					
					//p1 menu list version 2
					
					//gui list with specifications
					String[] panelList = {"", "factory", "", "reactor", "", "turret1", "", "turret2", "", "turret3", "", "miner"};
					
					JList list = new JList(panelList);							///list display
					
					list.setSelectionMode(ListSelectionModel.SINGLE_INTERVAL_SELECTION);
					list.setLayoutOrientation(JList.HORIZONTAL_WRAP);
					list.setVisibleRowCount(-1);							//show all existing list rows
					list.setPreferredSize(new Dimension(100,500));			//size
					
					p1menu.add(list);										//add list to menu area
					
					//scroller for list
					/*
					JScrollPane listScroller = new JScrollPane(list);
					listScroller.setPreferredSize(new Dimension(100, 500));
					*/
										
					//add scroller to menu area
					
					//p1menu.add(listScroller);
					
					
					//add purchasable items to menu
					/*
					p1menu.add(item1);
					p1menu.add(item2);
					p1menu.add(item3);
					p1menu.add(item4);
					p1menu.add(item5);
					*/
					
					//battleground panel - here we have a specified are where tiles, towers, paths, mobs will take place. Background color is set to see the region for future 
					JPanel bgPanel = new JPanel();
					bgPanel.setPreferredSize(new Dimension(1200,750));
					bgPanel.setBackground(new Color(174, 198, 207));
					
					//player 2 menu
					JPanel p2menu = new JPanel();
					p2menu.setPreferredSize(new Dimension(175,750));
					p2menu.setBackground(new Color(245,222,179));
					
					//purchasable items			
					JPanel itema = new JPanel();
					itema.setPreferredSize(new Dimension(100,100));
					itema.setBackground(Color.red);
					
					JPanel itemb = new JPanel();
					itemb.setPreferredSize(new Dimension(100,100));
					itemb.setBackground(Color.green);
					
					JPanel itemc = new JPanel();
					itemc.setPreferredSize(new Dimension(100,100));
					itemc.setBackground(Color.blue);
					
					JPanel itemd = new JPanel();
					itemd.setPreferredSize(new Dimension(100,100));
					itemd.setBackground(Color.black);
					
					JPanel iteme = new JPanel();
					iteme.setPreferredSize(new Dimension(100,100));
					iteme.setBackground(Color.white);
					
					//add purchasable items to menu
					/*
					p2menu.add(itema);
					p2menu.add(itemb);
					p2menu.add(itemc);
					p2menu.add(itemd);
					p2menu.add(iteme);
					*/
					//p2 menu list version 2
					
					//gui list with specifications
					String[] panelList2 = {"factory", "reactor", "turret1", "turret2", "turret3", "miner"};
					
					JList list2 = new JList(panelList);							///list display
					
					list2.setSelectionMode(ListSelectionModel.SINGLE_INTERVAL_SELECTION);
					list2.setLayoutOrientation(JList.HORIZONTAL_WRAP);
					list2.setVisibleRowCount(-1);							//show all existing list rows
					list2.setPreferredSize(new Dimension(100,100));			//size
					
					p1menu.add(list2);										//add list to menu area
					
					//scroller for list
					JScrollPane list2Scroller = new JScrollPane(list2);
					list2Scroller.setPreferredSize(new Dimension(100, 100));
										
					//add scroller to menu area
					p2menu.add(list2Scroller);
					
									
					//add sub panels to game panel
					gamePanel.add(displayPanel);
					gamePanel.add(p1menu);
					gamePanel.add(bgPanel);
					gamePanel.add(p2menu);					
					
					//frame defaults
					bGUI.getContentPane().add(gamePanel);
					bGUI.pack();
					bGUI.setVisible(true);
					
					//p1 menu listener mouse over - make menu visible
					p1menu.addMouseListener(new MouseAdapter()		{
						 public void mouseEntered(MouseEvent e) {
						       System.out.println("P1 menu is visible");
						       
						       item1.setOpaque(true);
						       item2.setOpaque(true);
						       item3.setOpaque(true);
						       item4.setOpaque(true);
						       item5.setOpaque(true);
						       
						       list.setOpaque(true);
						       
						       p1menu.setOpaque(true);
						       p1menu.repaint();		//update 
						    }
					});		
					
					//p1 menu listener mouse over - make menu invisible
					p1menu.addMouseListener(new MouseAdapter()		{
						 public void mouseExited(MouseEvent e) {
						       System.out.println("P1 menu is invisible");
						       
						       item1.setOpaque(false);
						       item2.setOpaque(false);
						       item3.setOpaque(false);
						       item4.setOpaque(false);
						       item5.setOpaque(false);
						       
						       list.setOpaque(false);
						       
						       p1menu.setOpaque(false);						       
						       p1menu.repaint();		//update 
						    }
					});	
					
					//p2 menu listener mouse over - make menu visible
					p2menu.addMouseListener(new MouseAdapter()		{
						 public void mouseEntered(MouseEvent e) {
						       System.out.println("P2 menu is visible");
						       
						       itema.setOpaque(true);
						       itemb.setOpaque(true);
						       itemc.setOpaque(true);
						       itemd.setOpaque(true);
						       iteme.setOpaque(true);
						       
						       list2Scroller.setVisible(true);
						       list2.setVisible(true);
						       
						       p2menu.setOpaque(true);
						       p2menu.repaint();		//update 
						    }
					});		
					
					//p2 menu listener not mouse over - make menu invisible
					p2menu.addMouseListener(new MouseAdapter()		{
						 public void mouseExited(MouseEvent e) {
						       System.out.println("P2 menu is invisible");
						       
						       itema.setOpaque(false);
						       itemb.setOpaque(false);
						       itemc.setOpaque(false);
						       itemd.setOpaque(false);
						       iteme.setOpaque(false);						       
						       
						       
						       list2.setVisible(false);
						       
						       p2menu.setOpaque(false);						       
						       p2menu.repaint();		//update 
						    }
					});	
					
					//display exited log on close
				    bGUI.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);	//don't close immediately
				    
				    //close message action
				    bGUI.addWindowListener(new java.awt.event.WindowAdapter() {
				        @Override
				        public void windowClosing(java.awt.event.WindowEvent windowEvent) {
				        	System.out.println("Exited game menu");	//log message
				            bGUI.dispose();	//exit
				            
				        }
				    });										
			}		
		});
				
		//credits button action
		credits.addActionListener(new ActionListener()		{
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub			
					System.out.println("Credits frame is activated");
					
					//credits frame
				    JFrame bGUI = new JFrame("S&S: A Space Adventure");		//frame with a name  
				    
				    //display "exited log" on close
				    bGUI.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);	//don't close immediately
				    
					bGUI.setLocation(600,150);								//location of window on screen. Left top corner is counted as origin
					
					//credits background panel
					JPanel credPanel = new JPanel();
					credPanel.setPreferredSize(new Dimension(600,750));
					credPanel.setBackground(Color.orange);			
										
					//text field
					JLabel txt = new JLabel("Credits", null, JLabel.CENTER);	//textfield with a name
					txt.setBorder(null);										//borders of the textfield: invisible, colorful etc
					txt.setBackground(null);									//background color or picture
					txt.setForeground(Color.red); 								//text color
					
					//credits text features
					Font f = new Font(null, Font.ITALIC, 30);	
					txt.setFont(f);
					txt.setAlignmentX(Component.CENTER_ALIGNMENT);
					txt.setPreferredSize(new Dimension(590,100));
					
					//logo label
					JLabel logo = new JLabel(new ImageIcon("C:\\Users\\user\\eclipse-workspace\\Sword&Shield\\images\\S_S-A_Space_Adventure-Logo.png"));
					
					//add panels to the background panel
					credPanel.add(txt);
					credPanel.add(logo);
					
					//frame defaults
					bGUI.getContentPane().add(credPanel);
					bGUI.pack();
					bGUI.setVisible(true);
					
					//close message action
				    bGUI.addWindowListener(new java.awt.event.WindowAdapter() {
				        @Override
				        public void windowClosing(java.awt.event.WindowEvent windowEvent) {
				        	System.out.println("Exited credits");	//log message
				            bGUI.dispose();	//exit
				            
				        }
				    });
										
			}		
		});
		
		//sound button action
		sound.addActionListener(new ActionListener()
		{
			public void actionPerformed(ActionEvent arg0) {
				// TODO Auto- generated method stub
				
				playSound("file:///C:/Users/user/eclipse-workspace/Sword&Shield/src/RA.wav"); 	//music player 1
			
				/* 																				//music player 2
				boolean isPlaying = false;	
				if (isPlaying) {
					sound.setText("Pause");
				   isPlaying = false;
				   current.stop();
				} 
				else {
					sound.setText("Play");
					isPlaying = true;
					current.play();
				}*/
					
			}
		});
		
		//panels of main menu
		
		//logo panel
		JPanel sub1 = new JPanel();
		sub1.setPreferredSize(new Dimension(500,160));
		sub1.setBackground(new Color(253, 253, 150));
		
		//newGame button panel
		JPanel sub2 = new JPanel();
		sub2.setPreferredSize(new Dimension(500,40));
		sub2.setBackground(new Color(253, 253, 150));
		sub2.add(newGame);
		
		//unused panel in case the use of help 
		JPanel sub3 = new JPanel();
		sub3.setPreferredSize(new Dimension(500,0));
		sub3.setBackground(new Color(253, 253, 150));
		//sub3.add(help);		
		
		//credits button panel
		JPanel sub4 = new JPanel();
		sub4.setPreferredSize(new Dimension(500,40));
		sub4.setBackground(new Color(253, 253, 150));
		sub4.add(credits);
		
		//sound button panel
		JPanel sub5 = new JPanel();
		sub5.setPreferredSize(new Dimension(500,40));
		sub5.setBackground(new Color(253, 253, 150));
		sub5.add(sound);
		
		//backgrounds are visible/invisible for panels; for frame background, it is visible as an image visible 
		sub1.setOpaque(false);
		sub2.setOpaque(false);
		sub3.setOpaque(false);
		sub4.setOpaque(false);
		sub5.setOpaque(false);
		panel.setOpaque(false);
		masterPanel.setOpaque(false);
		
		//contents to relative panel
		panel.add(sub1);
		panel.add(sub2);
		panel.add(sub3);
		panel.add(sub4);
		panel.add(sub5);
		
		//add panels to master panel
		masterPanel.add(panel);
		
		//background image				
		frame.setContentPane(new JLabel( new ImageIcon("C:\\Users\\user\\eclipse-workspace\\Sword&Shield\\src\\spacebattle.png")));
		frame.setLayout(new BorderLayout());
		
		//frame defaults
		frame.getContentPane().add(masterPanel);
		frame.setSize(500,400);		
		//frame.pack();				//auto fit size
		frame.setResizable(false);
		frame.setVisible(true);
	}
}